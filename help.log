// ─────────────────────────────────────────────────────────────
// 📦 PODSTAWY PROJEKTU TODO-LIST Z REACT + TYPESCRIPT
// ─────────────────────────────────────────────────────────────

/*
Wymagane zależności:
- React
- ReactDOM
- TypeScript (dla projektu typu CRA lub Vite)
*/

/*
📁 STRUKTURA PROJEKTU (przykład):
src/
├── App.tsx          ← główny komponent
├── index.tsx        ← punkt wejścia
├── types.ts         ← opcjonalne typy
├── components/
│   └── TaskItem.tsx ← komponent pojedynczego zadania
*/

// ─────────────────────────────────────────────────────────────npm
// 🔡 TYPY
// ─────────────────────────────────────────────────────────────

type Task = {
  id: number;
  text: string;
  done: boolean;
};

// ─────────────────────────────────────────────────────────────
// 📘 GŁÓWNY KOMPONENT APLIKACJI
// ─────────────────────────────────────────────────────────────

import { useState } from "react";

export default function App() {
  // Stan tekstu wpisywanego przez użytkownika
  const [text, setText] = useState<string>("");

  // Stan listy zadań
  const [tasks, setTasks] = useState<Task[]>([]);

  // Obsługa dodawania zadania
  const handleAdd = () => {
    if (text.trim() === "") return;

    const newTask: Task = {
      id: Date.now(),       // unikalne ID na podstawie czasu
      text,
      done: false,
    };

    setTasks([...tasks, newTask]); // dodanie nowego zadania
    setText(""); // wyczyszczenie inputa
  };

  // Obsługa przełączania checkboxa
  const handleToggle = (id: number) => {
    const updated = tasks.map((task) =>
      task.id === id ? { ...task, done: !task.done } : task
    );
    setTasks(updated);
  };

  // Obsługa usuwania zadania
  const handleDelete = (id: number) => {
    setTasks(tasks.filter((task) => task.id !== id));
  };

  return (
    <div style={{ padding: "1rem", maxWidth: "600px", margin: "0 auto" }}>
      <h1>📝 Moja lista zadań</h1>

      {/* INPUT + BUTTON */}
      <input
        type="text"
        placeholder="Wpisz zadanie..."
        value={text}
        onChange={(e) => setText(e.target.value)}
      />
      <button onClick={handleAdd}>Dodaj</button>

      {/* LISTA ZADAŃ */}
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>
            <input
              type="checkbox"
              checked={task.done}
              onChange={() => handleToggle(task.id)}
            />
            <span style={{ textDecoration: task.done ? "line-through" : "none" }}>
              {task.text}
            </span>
            <button onClick={() => handleDelete(task.id)}>Usuń</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

// ─────────────────────────────────────────────────────────────
// 📌 INDEKS (index.tsx) — montuje aplikację w DOM
// ─────────────────────────────────────────────────────────────

/*
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const root = ReactDOM.createRoot(document.getElementById("root")!);
root.render(<App />);
*/

// ─────────────────────────────────────────────────────────────
// 🔁 PODSUMOWANIE: CO TRZEBA ROZUMIEĆ
// ─────────────────────────────────────────────────────────────

/*
1. Komponenty funkcjonalne (funkcje zwracające JSX)
2. JSX to HTML w JS: className, htmlFor, itd.
3. useState do przechowywania stanu:
   - `const [value, setValue] = useState<TYP>(...)`
4. Typy: `type`, obiekty, funkcje jako typy (`(id: number) => void`)
5. Funkcje obsługujące zdarzenia (onClick, onChange)
6. `map()` do renderowania listy
7. `filter()` i `map()` do modyfikacji stanu
8. JSX ma `key` przy mapowaniu tablic
9. `Date.now()` daje unikalne ID
10. Projekt można zdeployować np. na Vercel lub Netlify
*/

// ─────────────────────────────────────────────────────────────
// 🧪 CO DALEJ? (opcjonalne rozszerzenia)
// ─────────────────────────────────────────────────────────────

/*
- Dodanie zapisu do localStorage
- Filtrowanie zadań (wszystkie / zrobione / niezrobione)
- Edytowanie zadania
- Stylowanie Tailwindem lub CSS
*/

